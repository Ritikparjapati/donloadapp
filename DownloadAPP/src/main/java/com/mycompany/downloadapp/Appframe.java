/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.downloadapp;

import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;
import java.awt.Desktop;
import java.awt.Desktop.Action;
import java.awt.Image;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author aks05
 */
public class Appframe extends javax.swing.JFrame {

    String gfile;
    File filenew;

    /**
     * Creates new form NewJFrame
     */
    public Appframe() throws IOException {
        initComponents();
        bar.setVisible(false);
        File f1 = new File("./myfiles/my.txt");
        filenew=f1;
        CSVReader CSVFileReader = new CSVReader(new FileReader(filenew));
        if (CSVFileReader.readNext() == null) {
            try {
                FileWriter outputfile = new FileWriter(filenew, true);
                CSVWriter writer = new CSVWriter(outputfile);
                String[] header = {"Time", "Download link", "File Path"};
                writer.writeNext(header);
                writer.close();
                data();
            } catch (Exception e) {
                System.out.println("first calling:" + e);
            }
        } else {
            data();
        }
//            File fd = new File("./History");
//            filenew.mkdir();
//            File f2=new File(fd+"/my.txt");
//            f2.createNewFile();
//            f2=filenew;
//            CSVReader CSVFileReader = new CSVReader(new FileReader(filenew));
//            if (CSVFileReader.readNext() == null) {
//                try {
//                    FileWriter outputfile = new FileWriter(filenew, true);
//                    CSVWriter writer = new CSVWriter(outputfile);
//                    String[] header = {"Time", "Download link", "File Path"};
//                    writer.writeNext(header);
//                    writer.close();
//                    data();
//                } catch (Exception e) {
//                    System.out.println("first calling:" + e);
//                }
//            } else {
//                data();
//            }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        link = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        sss = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        bar = new javax.swing.JProgressBar();
        sicon = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        About = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Downloader");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        link.setBorder(null);

        jButton1.setBackground(new java.awt.Color(0, 153, 102));
        jButton1.setText("Download");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 32)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Recent History");
        jLabel1.setFocusable(false);

        sss.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        table.setBackground(new java.awt.Color(0, 0, 0));
        table.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        table.setForeground(new java.awt.Color(255, 255, 255));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        sss.setViewportView(table);

        bar.setForeground(new java.awt.Color(51, 153, 255));
        bar.setStringPainted(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(874, 874, 874))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sss, javax.swing.GroupLayout.PREFERRED_SIZE, 696, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(564, 564, 564)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(link, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(143, 143, 143)
                        .addComponent(sicon, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(227, 227, 227))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(sicon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(68, 68, 68))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(link, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sss, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addGap(86, 86, 86))
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        jMenuItem1.setText("History Location");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar2.add(jMenu1);

        jMenu4.setText("Edit");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Cut");
        jMenu4.add(jMenuItem2);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem4.setText("Copy");
        jMenu4.add(jMenuItem4);

        jMenuBar2.add(jMenu4);

        About.setText("About");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        jMenuItem3.setText("Project Undergo");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        About.add(jMenuItem3);

        jMenuBar2.add(About);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 829, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int r = table.getSelectedRow();
        int c = table.getSelectedColumn();

        String value = (String) table.getValueAt(r, 2);
        String cvalue = (String) table.getValueAt(r, c);
        if (value == cvalue) {
            File directory = new File(value);
            try {
                Desktop.getDesktop().open(directory);
            } catch (Exception e) {
                JOptionPane.showConfirmDialog(this, "File Does not exits", "Title", JOptionPane.CLOSED_OPTION);
            }
        }
        String dvalue = (String) table.getValueAt(r, 1);
        if (dvalue == cvalue) {
            link.setText(dvalue);
        }
    }//GEN-LAST:event_tableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser ch = new JFileChooser();
        ch.showSaveDialog(null);
        ch.setFileSelectionMode(JFileChooser.FILES_ONLY);
        File file = ch.getSelectedFile();
        String gfile = file.getAbsolutePath();
        //        System.out.println(gfile);
        String dpath = link.getText();

        dprogress(file, dpath);

        String extension = "";
        int index = dpath.lastIndexOf('.');
        if (index > 0) {
            extension = dpath.substring(index + 1);

        }
        Date currentDate = new Date();
        String dateToStr = DateFormat.getDateTimeInstance().format(currentDate);
        //        System.out.println("Date Format using getDateTimeInstance(): "+dateToStr);

        String filepath = file + "." + extension;

        File filenew = new File("./myfiles/my.txt");
        try {

            FileWriter outputfile = new FileWriter(filenew, true);

            CSVWriter writer = new CSVWriter(outputfile);

//            String[] header = {"Time", "Download link", "File Path"};
//            writer.writeNext(header);
            // add data to csv
            //            String escapedData = gfile.replaceAll("\\R", " ");
            if (gfile.contains("\\")) {
                gfile = gfile.replace("\\", "\\" + "\\");
                //                escapedData = "\"" + gfile + "\"";
            }
            int in = gfile.lastIndexOf('\\');
            String newfile = gfile.substring(0, in + 1);
            System.out.println(newfile);
            String[] data1 = {dateToStr, dpath, newfile};
            writer.writeNext(data1);

            writer.close();
            data();
        } catch (IOException e) {

            e.printStackTrace();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        Undergo s = new Undergo();
        s.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String value = "C:\\Users\\aks05\\OneDrive\\Documents\\NetBeansProjects\\DownloadAPP\\myfiles";
        File directory = new File(value);
        try {
            Desktop.getDesktop().open(directory);
        } catch (Exception e) {
            JOptionPane.showConfirmDialog(this, "File Does not exits", "Title", JOptionPane.CLOSED_OPTION);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Appframe.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Appframe.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Appframe.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Appframe.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Appframe().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Appframe.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu About;
    private javax.swing.JProgressBar bar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField link;
    private javax.swing.JLabel sicon;
    private javax.swing.JScrollPane sss;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    private void data() throws IOException {
        Object[] columnnames;
        CSVReader CSVFileReader = new CSVReader(new FileReader(filenew));
        List myEntries = CSVFileReader.readAll();
//        String name[] = {"Date and Time", "Download link", "File pCSVReader CSVFileReader = new CSVReader(new FileReader(new File("./myfiles/my.txt")));ath"};
        columnnames = (String[]) myEntries.get(0);
        DefaultTableModel tableModel = new DefaultTableModel(columnnames, myEntries.size() - 1);
        int rowcount = tableModel.getRowCount();
        for (int x = 0; x < rowcount + 1; x++) {
            int columnnumber = 0;
            if (x > 0) {
                for (String thiscellvalue : (String[]) myEntries.get(x)) {
                    tableModel.setValueAt(thiscellvalue, x - 1, columnnumber);
                    columnnumber++;
                }
            }
        }

        table.setModel(tableModel);
        table.setDefaultEditor(Object.class, null);

    }

    private void dprogress(File gfile, String dpath) {
        Runnable updatethread;
        updatethread = new Runnable() {
            public void run() {
                try {
                    bar.setVisible(true);
                    URL url = new URL(dpath);
                    HttpURLConnection httpConnection = (HttpURLConnection) (url.openConnection());
                    long completeFileSize = httpConnection.getContentLength();

                    String extension = "";
                    int index = dpath.lastIndexOf('.');
                    if (index > 0) {
                        extension = dpath.substring(index + 1);
                        System.out.println("File extension is " + extension);
                    }

                    String dowpath = gfile + "." + extension;

                    System.out.println(dowpath);

                    java.io.BufferedInputStream in = new java.io.BufferedInputStream(httpConnection.getInputStream());
                    java.io.FileOutputStream fos = new java.io.FileOutputStream(dowpath);
                    java.io.BufferedOutputStream bout = new BufferedOutputStream(
                            fos, 1024);
                    byte[] data = new byte[1024];
                    long downloadedFileSize = 0;
                    int x = 0;
                    while ((x = in.read(data, 0, 1024)) >= 0) {
                        downloadedFileSize += x;

                        // calculate progress
                        final int currentProgress = (int) ((((double) downloadedFileSize) / ((double) completeFileSize)) * 100d);

                        // update progress bar
                        SwingUtilities.invokeLater(new Runnable() {

                            @Override
                            public void run() {

                                bar.setValue(currentProgress);
                            }
                        });

                        bout.write(data, 0, x);
                    }

                    bout.close();

                    in.close();
                } catch (FileNotFoundException e) {
                } catch (IOException e) {
                }
            }
        };
        new Thread(updatethread).
                start();
    }
}
